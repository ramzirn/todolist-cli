#!/bin/bash

TODO_FILE="$HOME/bin/todolist/todo_list.txt"

list_todos() {
    if [ -f "$TODO_FILE" ]; then
        local i=1
        local j=1
        local lignes_done=()
        local lignes_todo=()

        while IFS= read -r line; do
            if [[ "$line" == *"DONE"* ]]; then
                lignes_done+=("$j\t$(echo "$line" | sed 's/ DONE//')")
            else
                lignes_todo+=("$i\t$line")
                ((i++))
            fi
            ((j++))
        done < "$TODO_FILE"

        # Afficher d'abord les t√¢ches non termin√©es
        for task in "${lignes_todo[@]}"; do
            echo -e "$task"
        done

        # Ensuite, les t√¢ches DONE en vert
        for task in "${lignes_done[@]}"; do
            echo -e "\033[32m$task\033[0m"
        done
    else
        echo "Aucune t√¢che enregistr√©e."
    fi
}
list_todos_by_date() {
    local date_recherchee="$1"
    if [ -z "$date_recherchee" ]; then
        echo "Usage : todo date <JJ-MM-AAAA>"
        return 1
    fi

    if [ -f "$TODO_FILE" ]; then
        grep -nE "Due: ${date_recherchee}" "$TODO_FILE" | while IFS=: read -r linenum task; do
            if [[ "$task" == *"DONE"* ]]; then
                echo -e "\033[32m$linenum\t$(echo "$task" | sed 's/ DONE//')\033[0m"
            else
                echo -e "$linenum\t$task"
            fi
        done
    else
        echo "Aucune t√¢che enregistr√©e."
    fi
}


add_todo() {
    TASK="$1"
    DUE_DATE="$2"
    
    # Ajouter la date d'√©ch√©ance √† la t√¢che si elle est fournie
    if [ -n "$DUE_DATE" ]; then
        echo "$TASK - Due: $DUE_DATE" >> "$TODO_FILE"
    else
        echo "$TASK" >> "$TODO_FILE"
    fi

    echo "T√¢che ajout√©e : $TASK"
}

remove_todo() {
    if [ -f "$TODO_FILE" ]; then
        sed -i.bak "${1}d" "$TODO_FILE"
        echo "T√¢che num√©ro $1 supprim√©e."
    else
        echo "Le fichier des t√¢ches est vide."
    fi
}

mark_done() {
    TASK_NUM=$1
    TEMP_FILE=$(mktemp)

    if [ -f "$TODO_FILE" ]; then
        sed "${TASK_NUM}q;d" "$TODO_FILE" > "$TEMP_FILE"
        sed -i.bak "${TASK_NUM}d" "$TODO_FILE"
        sed -i "2a $(cat $TEMP_FILE) DONE" "$TODO_FILE"

        echo -e "\033[32mT√¢che marqu√©e comme termin√©e : $(cat $TEMP_FILE)\033[0m"
        rm "$TEMP_FILE"
    else
        echo "Le fichier des t√¢ches est vide."
    fi
}

list_today_todos() {
    local today=$(date +"%d-%m-%Y")
    if [ -f "$TODO_FILE" ]; then
        grep -nE "Due: ${today}" "$TODO_FILE" | while IFS=: read -r linenum task; do
            if [[ "$task" == *"PRIORITY"* ]]; then
                echo -e "\033[31m$linenum\t$(echo "$task" | sed 's/ PRIORITY//')\033[0m"
            elif [[ "$task" == *"DONE"* ]]; then
                echo -e "\033[32m$linenum\t$(echo "$task" | sed 's/ DONE//')\033[0m"
            else
                echo -e "$linenum\t$task"
            fi
        done
    else
        echo "Aucune t√¢che enregistr√©e."
    fi
}

list_context_todos() {
    local context="+$1"
    if [ -f "$TODO_FILE" ]; then
        grep -nE "(^| )\\${context}( |$)" "$TODO_FILE" | while IFS=: read -r linenum task; do
            if [[ "$task" == *"DONE"* ]]; then
                echo -e "\033[32m$linenum\t$(echo "$task" | sed 's/ DONE//')\033[0m"
            else
                echo -e "$linenum\t$task"
            fi
        done
    else
        echo "Aucune t√¢che enregistr√©e."
    fi
}
show_help() {
    cat << EOF

üìò Manuel d'utilisation de 'todo'

USAGE :
    todo <commande> [arguments]

COMMANDES DISPONIBLES :

‚úÖ  add "<t√¢che>" JJ-MM-AAAA
    Ajouter une t√¢che avec une date d‚Äô√©ch√©ance.
    Tu peux inclure un contexte dans la t√¢che en ajoutant +motcl√© (ex: +bdd).
    Exemple :
        todo add "Lire le chapitre 2 +reseau" 15-04-2025
        todo add "Faire le TP +bdd" 17-04-2025

üìã  list
    Affiche toutes les t√¢ches, les t√¢ches termin√©es sont plac√©es en bas.

üìÜ  today
    Affiche les t√¢ches dont la date d‚Äô√©ch√©ance est aujourd‚Äôhui.

üìÖ  date JJ-MM-AAAA
    Affiche les t√¢ches pr√©vues pour une date sp√©cifique.
    Exemple :
        todo date 14-04-2025

üîé  context <motcl√©>
    Recherche les t√¢ches associ√©es √† un contexte sp√©cifique (ex: +reseau, +bdd).
    Exemple :
        todo context bdd
        todo context reseau

‚úÖ  done <num√©ro>
    Marque une t√¢che comme termin√©e. Elle est d√©plac√©e en bas et affich√©e en vert.
    Exemple :
        todo done 2

üóëÔ∏è  remove <num√©ro>
    Supprime la t√¢che avec le num√©ro donn√©.
    Exemple :
        todo remove 3

üìñ  man
    Affiche ce manuel.

BONNES PRATIQUES :
- Les contextes sont des mots-cl√©s commen√ßant par + (ex: +bdd, +perso).
- Le champ "Due:" est automatiquement utilis√© pour la date.
- Reste coh√©rent dans l'√©criture de tes contextes pour une recherche efficace.

EOF
}


# Main
if [ "$1" == "add" ]; then
    if [ -z "$2" ]; then
        echo "Usage : todo add <t√¢che> [date d'√©ch√©ance]"
    else
        TASK="$2"
        DUE_DATE="$3"
        add_todo "$TASK" "$DUE_DATE"
    fi
elif [ "$1" == "list" ]; then
    list_todos
    elif [ "$1" == "date" ]; then
    list_todos_by_date "$2"
elif [ "$1" == "remove" ]; then
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        remove_todo "$2"
    else
        echo "Veuillez sp√©cifier un num√©ro de t√¢che valide."
    fi
elif [ "$1" == "done" ]; then
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        mark_done "$2"
    else
        echo "Veuillez sp√©cifier un num√©ro de t√¢che valide pour marquer comme termin√©e."
    fi
elif [ "$1" == "context" ]; then
    if [ -z "$2" ]; then
        echo "Veuillez sp√©cifier un contexte."
    else
        list_context_todos "$2"
    fi
elif [ "$1" == "today" ]; then
    list_today_todos
    elif [ "$1" == "man" ]; then
    show_help
else
    echo "Usage : todo add <t√¢che> [date d'√©ch√©ance] | todo list | todo today | todo remove <num√©ro> | todo done <num√©ro> | todo context <contexte>"
fi
